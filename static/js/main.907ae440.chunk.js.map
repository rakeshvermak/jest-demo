{"version":3,"sources":["Components/header.js","Components/footer/footer.js","Components/button/button.js","Components/count/count.js","App.js","serviceWorker.js","index.js"],"names":["NavbarPage","color","dark","expand","className","Component","FooterPage","fluid","md","href","Date","getFullYear","Button","label","type","data-testid","Count","useState","count","setCounter","onClick","prevCount","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAiBmBA,E,iLAXb,OAEN,kBAAC,IAAD,CAAWC,MAAM,SAASC,MAAI,EAACC,OAAO,MAC9B,kBAAC,IAAD,KACE,4BAAQC,UAAU,cAAlB,mB,GAPeC,aCwCVC,EAxCI,WACjB,OACE,kBAAC,IAAD,CAAWL,MAAM,OAAOG,UAAU,wBAChC,kBAAC,IAAD,CAAcG,OAAK,EAACH,UAAU,4BAC5B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQI,GAAG,KACT,wBAAIJ,UAAU,SAAd,kBACA,uGAKF,kBAAC,IAAD,CAAQI,GAAG,KACT,wBAAIJ,UAAU,SAAd,SACA,4BACE,wBAAIA,UAAU,iBACZ,uBAAGK,KAAK,MAAR,WAEF,wBAAIL,UAAU,iBACZ,uBAAGK,KAAK,MAAR,WAEF,wBAAIL,UAAU,iBACZ,uBAAGK,KAAK,MAAR,WAEF,wBAAIL,UAAU,iBACZ,uBAAGK,KAAK,MAAR,eAMV,yBAAKL,UAAU,qCACb,kBAAC,IAAD,CAAcG,OAAK,GAAnB,SACU,IAAIG,MAAOC,cADrB,eAC+C,uBAAGF,KAAK,4BAAR,sBC9BxCG,MALf,YAAyB,IAARC,EAAO,EAAPA,MACb,OACI,4BAAQC,KAAK,SAASV,UAAU,kBAAkBW,cAAY,UAAUF,I,QCWjEG,MAZf,WAAkB,IAAD,EACeC,mBAAS,GADxB,mBACNC,EADM,KACCC,EADD,KAEf,OACE,yBAAKf,UAAU,OACf,uCACG,4BAAQgB,QAAS,kBAAMD,GAAW,SAAAE,GAAS,OAAIA,EAAY,MAAIN,cAAY,YAA3E,SACC,yBAAKA,cAAY,SAASG,GAC3B,4BAAQE,QAAS,kBAAMD,GAAW,SAAAE,GAAS,OAAIA,EAAY,MAAIN,cAAY,cAA3E,aC4BQO,MA5Bf,WACE,OACE,yBAAKlB,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,2DACC,8BAGL,kBAAC,IAAD,KAAc,yHACV,mHACA,iNACA,uBAAGK,KAAK,sBAAR,gBAEA,kBAAC,IAAD,SAAe,kBAAC,EAAD,OAIf,kBAAC,EAAD,CAASI,MAAM,eAEf,6BAEA,6BACC,kBAAC,EAAD,QCpBeU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.907ae440.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {MDBNavbar, MDBNavbarBrand} from \"mdbreact\";\r\n\r\nclass NavbarPage extends Component {\r\n\r\n    render() {\r\n      return (\r\n\r\n<MDBNavbar color=\"indigo\" dark expand=\"md\">\r\n        <MDBNavbarBrand>\r\n          <strong className=\"white-text\">Jest Demo</strong>\r\n        </MDBNavbarBrand> \r\n      \r\n      </MDBNavbar>\r\n      \r\n      )}\r\n    }\r\n    export default NavbarPage;","import React from \"react\";\r\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\n\r\nconst FooterPage = () => {\r\n  return (\r\n    <MDBFooter color=\"blue\" className=\"font-small pt-4 mt-4\">\r\n      <MDBContainer fluid className=\"text-center text-md-left\">\r\n        <MDBRow>\r\n          <MDBCol md=\"6\">\r\n            <h5 className=\"title\">Footer Content</h5>\r\n            <p>\r\n              Here you can use rows and columns here to organize your footer\r\n              content.\r\n            </p>\r\n          </MDBCol>\r\n          <MDBCol md=\"6\">\r\n            <h5 className=\"title\">Links</h5>\r\n            <ul>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 1</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 2</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 3</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 4</a>\r\n              </li>\r\n            </ul>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <MDBContainer fluid>\r\n          &copy; {new Date().getFullYear()} Copyright: <a href=\"https://www.shyamhub.com\"> ShyamHub.com </a>\r\n        </MDBContainer>\r\n      </div>\r\n    </MDBFooter>\r\n  );\r\n}\r\n\r\nexport default FooterPage;","import React from 'react';\r\nfunction Button({label}){\r\n    return(\r\n        <button type=\"button\" className=\"btn btn-success\" data-testid=\"button\">{label}</button>\r\n    )\r\n}\r\nexport default Button","import React, { useState } from 'react';\r\n\r\nfunction Count() {\r\n    const [count, setCounter] = useState(0)\r\n  return (\r\n    <div className=\"App\">   \r\n    <h4>Counter</h4>  \r\n       <button onClick={() => setCounter(prevCount => prevCount + 1)} data-testid=\"addCount\"> Add </button>\r\n        <div data-testid=\"count\">{count}</div>\r\n       <button onClick={() => setCounter(prevCount => prevCount - 1)} data-testid=\"minusCount\"> Minus </button>       \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Count;","import React from 'react';\nimport {MDBContainer} from \"mdbreact\";\nimport './App.css';\nimport NavbarPage from './Components/header';\nimport FooterPage from './Components/footer/footer';\nimport Button from './Components/button/button';\nimport Count from './Components/count/count';\n\n//import Test from './Components/test'\nfunction App() {\n  return (\n    <div className=\"App\">\n    <NavbarPage />  \n    <MDBContainer>\n    <h2>Testing React App with Jest</h2>\n     <hr />\n   \n</MDBContainer>\n<MDBContainer><p>Jest was created by Facebook and is a testing framework to test javascript and React code.</p>\n    <p>It works with projects using: Babel, TypeScript, Node, React, Angular, Vue and more!</p>\n    <p>You can literally just put your tests inside of a directory called __tests__ or name them with a .spec.js or .test.js extension, then run jest and it works. That is pretty sweet.</p>\n    <a href=\"http://reactjs.org\" >Learn react</a></MDBContainer>\n\n    <MDBContainer> <Count /></MDBContainer>\n    \n    \n   \n    <Button  label=\"Click me!!\"/>\n\n    <br />\n  \n    <br />\n     <FooterPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}